""" Telegram –±–æ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞ –∫—É—Ä—Å–∞ DevOPS.
 
–ø—Ä–∏–º–µ—Ä—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
 (8(\d{10})|8\(\d{3}\)\d{7}|8\ \(\d{3}\)\ \d{3}\ \d{2}\ \d{2}|8\ \d{3}\ \d{3}\ \d{2}\ \d{2}|8\-\d{3}\-\d{3}\-\d{2}\-\d{2}|\+7(\d{10})|\+7\(\d{3}\)\d{7}|\+7\ \(\d{3}\)\ \d{3}\ \d{2}\ \d{2}|\+7\ \d{3}\ \d{3}\ \d{2}\ \d{2}|\+7\-\d{3}\-\d{3}\-\d{2}\-\d{2})
 (8|\+7)((\d{10})|\(\d{3}\)\d{7}|\ \(\d{3}\)\ \d{3}\ \d{2}\ \d{2}|\ \d{3}\ \d{3}\ \d{2}\ \d{2}|\-\d{3}\-\d{3}\-\d{2}\-\d{2})
"""

import os
import logging
import time
import datetime
import re
import platform
import paramiko
import psycopg2
from telegram import Update, ForceReply
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
from dotenv import load_dotenv


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞.
load_dotenv()

TOKEN = os.getenv('TOKEN')
host = os.getenv('RM_HOST')
port = os.getenv('RM_PORT')
username = os.getenv('RM_USER')
password = os.getenv('RM_PASSWORD')
db_host = os.getenv('DB_HOST')
db_port = os.getenv('DB_PORT')
db_username = os.getenv('DB_USER')
db_password = os.getenv('DB_PASSWORD')
db_database = os.getenv('DB_DATABASE')
client = paramiko.SSHClient()
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
logging.basicConfig(
    filename='logfile.log', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
#logging.disable(logging.CRITICAL)

logging.debug('==== START ANOTHER T BOT ====')
logger = logging.getLogger(__name__)


## –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥.
def start(update: Update, context):
    user = update.effective_user
    update.message.reply_text(f'{user.full_name}, —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\r\n\
                              /verify_password - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è\r\n\
                              ==== –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ ====\r\n\
                              /find_email - –ø–æ–∏—Å–∫ –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ\r\n\
                              /find_phone_number - –ø–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ\r\n\
                              ====  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Linux-—Å–∏—Å—Ç–µ–º—ã ====\r\n\
                              /get_release - —Ä–µ–ª–∏–∑\r\n\
                              /get_uname - –∏–º—è —Ö–æ—Å—Ç–∞, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞, –≤–µ—Ä—Å–∏—è —è–¥—Ä–∞\r\n\
                              /get_uptime - –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ö–æ—Å—Ç–∞\r\n\
                              /get_df - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã\r\n\
                              /get_free - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.\r\n\
                              /get_mpstat - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã\r\n\
                              /get_w - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.\r\n\
                              /get_auths - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤—Ö–æ–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É.\r\n\
                              /get_critical - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π\r\n\
                              /get_ps - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö.\r\n\
                              /get_ss - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Ä—Ç–∞—Ö\r\n\
                              /get_apt_list - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö.\r\n\
                              /get_services - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö.\r\n\
                              ==== –§—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã ====\r\n\
                              /get_emails - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.\r\n\
                              /get_phone_numbers - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö.\r\n\
                              /get_repl_logs - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏.')

## –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ.
def findPhoneNumbersCommand(update: Update, context):
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: ')

    return 'findPhoneNumbers'

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ.
def findEmailsCommand(update: Update, context):
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: ')

    return 'findEmails'

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è.
def verifyPasswordCommand(update: Update, context):
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ')

    return 'verifyPassword'

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ –≤—ã–≤–æ–¥–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤.
def getAptListCommand(update: Update, context):
    update.message.reply_text('–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–∞—Ö? y / package_name')
    return 'getAptList'

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.
def findPhoneNumbers(update: Update, context):
    user_input = update.message.text # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π(–∏–ª–∏ –Ω–µ—Ç) –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.

    phoneNumRegex = re.compile(r'(8\d{10}|8\(\d{3}\)\d{7}|8\ \(\d{3}\)\ \d{3}\ \d{2}\ \d{2}|8\ \d{3}\ \d{3}\ \d{2}\ \d{2}|8\-\d{3}\-\d{3}\-\d{2}\-\d{2}|\+7\d{10}|\+7\(\d{3}\)\d{7}|\+7\ \(\d{3}\)\ \d{3}\ \d{2}\ \d{2}|\+7\ \d{3}\ \d{3}\ \d{2}\ \d{2}|\+7\-\d{3}\-\d{3}\-\d{2}\-\d{2})') # –°—Ç–æ–∏—Ç —É—á–µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. 8XXXXXXXXXX, 8(XXX)XXXXXXX, 8 XXX XXX XX XX, 8 (XXX) XXX XX XX, 8-XXX-XXX-XX-XX. –¢–∞–∫–∂–µ –≤–º–µ—Å—Ç–æ ‚Äò8‚Äô –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å ‚Äò+7‚Äô.

    phoneNumberList = phoneNumRegex.findall(user_input) # –ò—â–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.

    if not phoneNumberList: # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ—Ç.
        update.message.reply_text('–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã Ì†ΩÌ∏¢')
        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.
    
    global phoneNumbers # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —á—Ç–æ–±—ã –¥–æ—Ç—è–Ω—É—Ç—å—Å—è –¥–æ –Ω–µ–µ –∏–∑ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
    phoneNumbers = '' # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.
    for i in range(len(phoneNumberList)):
        phoneNumbers += f'{phoneNumberList[i]},' # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–π –Ω–æ–º–µ—Ä.
        
    update.message.reply_text(phoneNumbers) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    update.message.reply_text('–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑—É? ( y )')
    
    return 'writePhoneNumbers'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø–∏—Å–∏.

#  –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.
def findEmails(update: Update, context):
    user_input = update.message.text # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π(–∏–ª–∏ –Ω–µ—Ç) –ø–æ—á—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞.

    emailsRegex = re.compile(r'[a-z0-9\.\-+_]+@[a-z0-9\.\-+_]+\.[a-z]+') # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–∫–∞ –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.

    emailsList = emailsRegex.findall(user_input) # –ò—â–µ–º –ø–æ—á—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞.

    if not emailsList: # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ—Ç.
        update.message.reply_text('–ü–æ—á—Ç–æ–≤—ã–µ —è—â–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã Ì†ΩÌ∏¢')
        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.
    global emails # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —á—Ç–æ–±—ã –¥–æ—Ç—è–Ω—É—Ç—å—Å—è –¥–æ –Ω–µ–µ –∏–∑ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. 
    emails = '' # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ—á—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞.

    for i in range(len(emailsList)):
        emails += f'{emailsList[i]} ' # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å.
        
    update.message.reply_text(emails) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    update.message.reply_text('–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—á—Ç–æ–≤—ã–µ —è—â–∏–∫–∏? ( y )')

    return 'writeEmails' # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø–∏—Å–∏.

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è.
def verifyPassword(update: Update, context):
    user_input = update.message.text # –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.
    passwordRegex =  re.compile(r'(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()])[A-Za-z\d!@#$%^&*()]{8,}')
    user_password = passwordRegex.findall(user_input) # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ª–æ–≤–∏—è–º.

    if not user_password: # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º.
        update.message.reply_text('–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å Ì†ΩÌ∏¢')
        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.

        
    update.message.reply_text("–°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å Ì†ΩÌ≤™") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º.
    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.   

## –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–∏–∑–∞.
def getRelease(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('lsb_release -a')
        time.sleep(1)
        release_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(release_data.decode())
    except Exception:
        update.message.reply_text('Failed to connect')     
        
    return

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞, –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –≤–µ—Ä—Å–∏–∏ —è–¥—Ä–∞.    
def getUname(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('uname -a')
        time.sleep(1)
        uname_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(uname_data.decode())
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã. linux —Å–∏—Å—Ç–µ–º—ã.
def getUptime(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('uptime')
        time.sleep(1)
        uptime_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(uptime_data.decode())
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
def getDf(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('df -h')
        time.sleep(1)
        df_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(df_data.decode())
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.
def getFree(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('free')
        time.sleep(1)
        free_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(free_data.decode())
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã.
def getMpstat(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('mpstat')
        time.sleep(1)
        mpstat_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(mpstat_data.decode())
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ.
def getW(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('w')
        time.sleep(1)
        w_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(w_data.decode())
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –≤—Ö–æ–¥–∞—Ö –≤ —Å–∏—Å—Ç–µ–º—É.
def getAuths(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('last | head -n10')
        time.sleep(1)
        auths_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(auths_data.decode())
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è 5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.
def getCritical(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('journalctl -p 2 | tail -n5')
        time.sleep(1)
        critical_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(critical_data.decode())
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return    

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö.
def getPs(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('ps')
        time.sleep(3)
        ps_data = stdout.read() + stderr.read()
        client.close()
        if len(ps_data) > 4096: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
            for x in range(0, len(ps_data), 4096):
                update.message.reply_text(ps_data[x:x+4096].decode()) # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –±–ª–æ–∫–∞–º–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.
        else:
            update.message.reply_text(ps_data.decode()) # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ <= 4096 - –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º.
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return    

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Ä—Ç–∞—Ö.
def getSs(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('ss -uat')
        ss_data = stdout.read() + stderr.read()
        client.close()
        if len(ss_data) > 4096: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
            for x in range(0, len(ss_data), 4096):
                update.message.reply_text(ss_data[x:x+4096].decode()) # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –±–ª–æ–∫–∞–º–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.
        else:
            update.message.reply_text(ss_data.decode()) # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ <= 4096 - –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º.
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return    

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö –∏–ª–∏ –ø–∞–∫–µ—Ç–µ.
def getAptList(update: Update, context):
    if update.message.text == 'y':
        try:
            client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
            update.message.reply_text('Connect successfully to: '+host)
            stdin, stdout, stderr = client.exec_command('apt list') 
            package_data = stdout.read() + stderr.read()
            client.close()
            if len(package_data) > 4096: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
                for x in range(0, len(package_data), 4096):
                    update.message.reply_text(package_data[x:x+4096].decode()) # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –±–ª–æ–∫–∞–º–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.
                client.close()
            else:
                update.message.reply_text(package_data.decode())
                client.close()
        except Exception:
            update.message.reply_text('Failed to connect') 
        return ConversationHandler.END
    else:
        try:
            client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
            update.message.reply_text('Connect successfully to: '+host)
            stdin, stdout, stderr = client.exec_command('dpkg -s '+update.message.text) 
            package_data = stdout.read() + stderr.read()
            client.close()
            if len(package_data) > 4096: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
                for x in range(0, len(package_data), 4096):
                    update.message.reply_text(package_data[x:x+4096].decode()) # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –±–ª–æ–∫–∞–º–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.
                client.close()
            else:
                update.message.reply_text(package_data.decode())
                client.close()
        except Exception:
            update.message.reply_text('Failed to connect') 
        return ConversationHandler.END       

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö.
def getServices(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('systemctl --type=service') 
        service_list_data = stdout.read() + stderr.read()
        client.close()
        if len(service_list_data) > 4096: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
            for x in range(0, len(service_list_data), 4096):
                update.message.reply_text(service_list_data[x:x+4096].decode()) # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –±–ª–æ–∫–∞–º–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.
        else:
            update.message.reply_text(service_list_data.decode())
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return    

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.
def getEmails(update: Update, context):
    try:
        db_connection = psycopg2.connect(user=db_username, password=db_password, host=db_host, port=db_port, database=db_database)
        cursor = db_connection.cursor()
        cursor.execute("SELECT * FROM emails")
        emails_data = cursor.fetchall()
        for row in emails_data:
            update.message.reply_text(row)
        cursor.close()
        db_connection.close()
    except Exception:
        update.message.reply_text('Failed DB connect')

    return

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.
def getPhoneNumbers(update: Update, context):
    try:
        db_connection = psycopg2.connect(user=db_username, password=db_password, host=db_host, port=db_port, database=db_database)
        cursor = db_connection.cursor()
        cursor.execute("SELECT * FROM phone_numbers")
        phone_numbers_data = cursor.fetchall()
        for row in phone_numbers_data:
            update.message.reply_text(row)
        cursor.close()
        db_connection.close()
    except Exception:
        update.message.reply_text('Failed DB connect')

    return

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.
def writeEmails(update: Update, context):    
    user_input = update.message.text
    if user_input == 'y':
        try:
            add_time = str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            request_to_insert = "INSERT INTO emails (email, insert_time) VALUES ( %s, %s)"
            db_connection = psycopg2.connect(user=db_username, password=db_password, host=db_host, port=db_port, database=db_database)
            db_cursor = db_connection.cursor()
            mails_list = list(emails.split(" "))
            for row in mails_list:
                db_cursor.execute(request_to_insert, (row, add_time))
            db_connection.commit()
            db_cursor.close()
            db_connection.close()
            update.message.reply_text('–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É.')
            return ConversationHandler.END
        except Exception:
            update.message.reply_text('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ.')
            return ConversationHandler.END
    else:
        update.message.reply_text('–ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É.')
        return ConversationHandler.END    
    
# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.
def writePhoneNumbers(update: Update, context):    
    user_input = update.message.text
    if user_input == 'y':
        try:
            add_time = str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            request_to_insert = "INSERT INTO phone_numbers (phone, insert_time) VALUES ( %s, %s)"
            db_connection = psycopg2.connect(user=db_username, password=db_password, host=db_host, port=db_port, database=db_database)
            db_cursor = db_connection.cursor()
            phone_numbers_list = list(phoneNumbers.split(","))
            for row in phone_numbers_list:
                db_cursor.execute(request_to_insert, (row, add_time))
            db_connection.commit()
            db_cursor.close()
            db_connection.close()
            update.message.reply_text('–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É.')
            return ConversationHandler.END
        except Exception:
            update.message.reply_text('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ.')
            return ConversationHandler.END
    else:
        update.message.reply_text('–ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É.')
        return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏.
def getReplLogs(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('cat /var/log/postgresql/postgresql-14-main.log |grep repl_user') 
        logs_data = stdout.read() + stderr.read()
        client.close()
        if len(logs_data) > 4096: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
            for x in range(0, len(logs_data), 4096):
                update.message.reply_text(logs_data[x:x+4096].decode()) # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –±–ª–æ–∫–∞–º–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.
        else:
            update.message.reply_text(logs_data.decode())
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return  

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    updater = Updater(TOKEN, use_context=True)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞
    convHandlerFindPhoneNumbers = ConversationHandler(
        entry_points=[CommandHandler('find_phone_number', findPhoneNumbersCommand)],
        states={
            'findPhoneNumbers': [MessageHandler(Filters.text & ~Filters.command, findPhoneNumbers)],
            'writePhoneNumbers': [MessageHandler(Filters.text & ~Filters.command, writePhoneNumbers)]
        },
        fallbacks=[]
    )

    convHandlerFindEmails = ConversationHandler(
        entry_points=[CommandHandler('find_email', findEmailsCommand)],
        states={
            'findEmails': [MessageHandler(Filters.text & ~Filters.command, findEmails)],
            'writeEmails': [MessageHandler(Filters.text & ~Filters.command, writeEmails)]            
        },
        fallbacks=[]
    )

    convHandlerVerifyPassword = ConversationHandler(
        entry_points=[CommandHandler('verify_password', verifyPasswordCommand)],
        states={
            'verifyPassword': [MessageHandler(Filters.text & ~Filters.command, verifyPassword)],
        },
        fallbacks=[]
    )

    convHandlerGetAptList = ConversationHandler(
        entry_points=[CommandHandler('get_apt_list', getAptListCommand)],
        states={
            'getAptList': [MessageHandler(Filters.text & ~Filters.command, getAptList)],
        },
        fallbacks=[]
    )   

	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('get_release', getRelease))
    dp.add_handler(CommandHandler('get_uname', getUname))
    dp.add_handler(CommandHandler('get_uptime', getUptime))
    dp.add_handler(CommandHandler('get_df', getDf))
    dp.add_handler(CommandHandler('get_free', getFree))
    dp.add_handler(CommandHandler('get_mpstat', getMpstat))
    dp.add_handler(CommandHandler('get_w', getW))
    dp.add_handler(CommandHandler('get_auths', getAuths))
    dp.add_handler(CommandHandler('get_critical', getCritical))
    dp.add_handler(CommandHandler('get_ps', getPs))
    dp.add_handler(CommandHandler('get_ss', getSs))
    dp.add_handler(CommandHandler('get_services', getServices))
    dp.add_handler(CommandHandler('get_emails', getEmails))
    dp.add_handler(CommandHandler('get_phone_numbers', getPhoneNumbers))
    dp.add_handler(CommandHandler('get_repl_logs', getReplLogs))
    dp.add_handler(convHandlerFindPhoneNumbers)
    dp.add_handler(convHandlerFindEmails)
    dp.add_handler(convHandlerVerifyPassword)
    dp.add_handler(convHandlerGetAptList)
 

	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, start))

	# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()

	# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+C
    updater.idle()


if __name__ == '__main__':
    main()


""" Telegram –±–æ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞ –∫—É—Ä—Å–∞ DevOPS.
 
–ø—Ä–∏–º–µ—Ä—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
 (8(\d{10})|8\(\d{3}\)\d{7}|8\ \(\d{3}\)\ \d{3}\ \d{2}\ \d{2}|8\ \d{3}\ \d{3}\ \d{2}\ \d{2}|8\-\d{3}\-\d{3}\-\d{2}\-\d{2}|\+7(\d{10})|\+7\(\d{3}\)\d{7}|\+7\ \(\d{3}\)\ \d{3}\ \d{2}\ \d{2}|\+7\ \d{3}\ \d{3}\ \d{2}\ \d{2}|\+7\-\d{3}\-\d{3}\-\d{2}\-\d{2})
 (8|\+7)((\d{10})|\(\d{3}\)\d{7}|\ \(\d{3}\)\ \d{3}\ \d{2}\ \d{2}|\ \d{3}\ \d{3}\ \d{2}\ \d{2}|\-\d{3}\-\d{3}\-\d{2}\-\d{2})
"""

import os
import logging
import time
import re
import platform
import paramiko
from telegram import Update, ForceReply
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
from dotenv import load_dotenv

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv('TOKEN')
host = os.getenv('RM_HOST')
port = os.getenv('RM_PORT')
username = os.getenv('RM_USER')
password = os.getenv('RM_PASSWORD')

client = paramiko.SSHClient()
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())


# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    filename='logfile.log', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
#logging.disable(logging.CRITICAL)

logging.debug('==== START ANOTHER T BOT ====')
#logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥
def start(update: Update, context):
    user = update.effective_user
    update.message.reply_text(f'{user.full_name}, —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\r\n\
                              /verify_password - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è\r\n\
                              ==== –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ ====\r\n\
                              /find_email - –ø–æ–∏—Å–∫ –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ\r\n\
                              /find_phone_number - –ø–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ\r\n\
                              ====  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Linux-—Å–∏—Å—Ç–µ–º—ã ====\r\n\
                              /get_release - —Ä–µ–ª–∏–∑\r\n\
                              /get_uname - –∏–º—è —Ö–æ—Å—Ç–∞, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞, –≤–µ—Ä—Å–∏—è —è–¥—Ä–∞\r\n\
                              /get_uptime - –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ö–æ—Å—Ç–∞\r\n\
                              /get_df - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã\r\n\
                              /get_free - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.\r\n\
                              /get_mpstat - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã\r\n\
                              /get_w - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.\r\n\
                              /get_auths - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤—Ö–æ–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É.\r\n\
                              /get_critical - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π\r\n\
                              /get_ps - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö.\r\n\
                              /get_ss - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Ä—Ç–∞—Ö\r\n\
                              /get_apt_list - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö.\r\n\
                              /get_services - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö\r\n')

### –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

def findPhoneNumbersCommand(update: Update, context):
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: ')

    return 'findPhoneNumbers'

def findEmailsCommand(update: Update, context):
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: ')

    return 'findEmails'

def verifyPasswordCommand(update: Update, context):
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ')

    return 'verifyPassword'

### –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
def findPhoneNumbers(update: Update, context):
    user_input = update.message.text # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π(–∏–ª–∏ –Ω–µ—Ç) –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤

    phoneNumRegex = re.compile(r'(8\d{10}|8\(\d{3}\)\d{7}|8\ \(\d{3}\)\ \d{3}\ \d{2}\ \d{2}|8\ \d{3}\ \d{3}\ \d{2}\ \d{2}|8\-\d{3}\-\d{3}\-\d{2}\-\d{2}|\+7\d{10}|\+7\(\d{3}\)\d{7}|\+7\ \(\d{3}\)\ \d{3}\ \d{2}\ \d{2}|\+7\ \d{3}\ \d{3}\ \d{2}\ \d{2}|\+7\-\d{3}\-\d{3}\-\d{2}\-\d{2})') # –°—Ç–æ–∏—Ç —É—á–µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. 8XXXXXXXXXX, 8(XXX)XXXXXXX, 8 XXX XXX XX XX, 8 (XXX) XXX XX XX, 8-XXX-XXX-XX-XX. –¢–∞–∫–∂–µ –≤–º–µ—Å—Ç–æ ‚Äò8‚Äô –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å ‚Äò+7‚Äô.

    phoneNumberList = phoneNumRegex.findall(user_input) # –ò—â–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤

    if not phoneNumberList: # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ—Ç
        update.message.reply_text('–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üò¢')
        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    
    phoneNumbers = '' # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    for i in range(len(phoneNumberList)):
        phoneNumbers += f'{i+1}. {phoneNumberList[i]}\n' # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–π –Ω–æ–º–µ—Ä
        
    update.message.reply_text(phoneNumbers) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞

###  –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
def findEmails(update: Update, context):
    user_input = update.message.text # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π(–∏–ª–∏ –Ω–µ—Ç) –ø–æ—á—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞

    emailsRegex = re.compile(r'[a-z0-9\.\-+_]+@[a-z0-9\.\-+_]+\.[a-z]+') # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–∫–∞ –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.

    emailsList = emailsRegex.findall(user_input) # –ò—â–µ–º –ø–æ—á—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞

    if not emailsList: # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ—Ç
        update.message.reply_text('–ü–æ—á—Ç–æ–≤—ã–µ —è—â–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üò¢')
        return ConversationHandler.END# –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    
    emails = '' # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ—á—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
    for i in range(len(emailsList)):
        emails += f'{i+1}. {emailsList[i]}\n' # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
        
    update.message.reply_text(emails) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    return ConversationHandler.END

### –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
def verifyPassword(update: Update, context):
    user_input = update.message.text # –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    passwordRegex =  re.compile(r'(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()])[A-Za-z\d!@#$%^&*()]{8,}')
    user_password = passwordRegex.findall(user_input) # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ª–æ–≤–∏—è–º

    if not user_password: # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º 
        update.message.reply_text('–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å üò¢')
        return ConversationHandler.END# –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

        
    update.message.reply_text("–°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å üí™") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
    return ConversationHandler.END    

### –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–∏–∑–∞

def getRelease(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('lsb_release -a')
        time.sleep(1)
        release_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(f'{release_data.decode()}')
    except Exception:
        update.message.reply_text('Failed to connect')     
        
    return
   
def getUname(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('uname -a')
        time.sleep(1)
        uname_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(f'{uname_data.decode()}')
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

def getUptime(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('uptime')
        time.sleep(1)
        uptime_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(f'{uptime_data.decode()}')
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

def getDf(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('df -h')
        time.sleep(1)
        df_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(f'{df_data.decode()}')
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

def getFree(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('free')
        time.sleep(1)
        free_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(f'{free_data.decode()}')
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

def getMpstat(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('mpstat')
        time.sleep(1)
        mpstat_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(f'{mpstat_data.decode()}')
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

def getW(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('w')
        time.sleep(1)
        release_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(f'{release_data.decode()}')
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

def getAuths(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('last | head -n10')
        time.sleep(1)
        release_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(f'{release_data.decode()}')
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return

def getCritical(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('journalctl -p 2 | tail -n5')
        time.sleep(1)
        critical_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(f'{critical_data.decode()}')
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return    

def getPs(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('ps')
        time.sleep(3)
        release_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(f'{release_data.decode()}')
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return    

def getSs(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('ss -uat')
        ps_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(ps_data.decode())
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return    

def getAptList(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
        stdin, stdout, stderr = client.exec_command('apt list | head -n10') # –ö–æ—Å—Ç—ã–ª—å –Ω–∞ –≤—ã–≤–æ–¥ 10 —Å—Ç—Ä–æ–∫.
        apt_data = stdout.read() + stderr.read()
        logging.debug(apt_data.decode())
        client.close()
        update.message.reply_text(apt_data.decode())
    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return    

def getServices(update: Update, context):
    try:
        client.connect(hostname=host, username=username, password=password, port=port, look_for_keys=False, allow_agent=False)
        update.message.reply_text('Connect successfully to: '+host)
#        update.message.reply_text('–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–∞–∫–µ—Ç—ã? '+host)

#        if update.message.text == 'y':
        stdin, stdout, stderr = client.exec_command('systemctl --type=service|tail -n10') # –ö–æ—Å—Ç—ã–ª—å –Ω–∞ –≤—ã–≤–æ–¥ 10 —Å—Ç—Ä–æ–∫.
        apt_list_data = stdout.read() + stderr.read()
        client.close()
        update.message.reply_text(apt_list_data.decode())
#        else:
#            pkg = update.message.text
#            stdin, stdout, stderr = client.exec_command('dpkg -l {pkg}')
#            time.sleep(1)
#            pkg_data = stdout.read() + stderr.read()
#            client.close()
#            update.message.reply_text(pkg_data.decode())

    except Exception:
        update.message.reply_text('Failed to connect') 
        
    return    


def main():
    updater = Updater(TOKEN, use_context=True)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞
    convHandlerFindPhoneNumbers = ConversationHandler(
        entry_points=[CommandHandler('find_phone_number', findPhoneNumbersCommand)],
        states={
            'findPhoneNumbers': [MessageHandler(Filters.text & ~Filters.command, findPhoneNumbers)],
        },
        fallbacks=[]
    )

    convHandlerFindEmails = ConversationHandler(
        entry_points=[CommandHandler('find_email', findEmailsCommand)],
        states={
            'findEmails': [MessageHandler(Filters.text & ~Filters.command, findEmails)],
        },
        fallbacks=[]
    )

    convHandlerVerifyPassword = ConversationHandler(
        entry_points=[CommandHandler('verify_password', verifyPasswordCommand)],
        states={
            'verifyPassword': [MessageHandler(Filters.text & ~Filters.command, verifyPassword)],
        },
        fallbacks=[]
    )    


	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(convHandlerFindPhoneNumbers)
    dp.add_handler(convHandlerFindEmails)
    dp.add_handler(convHandlerVerifyPassword)
    dp.add_handler(CommandHandler('get_release', getRelease))
    dp.add_handler(CommandHandler('get_uname', getUname))
    dp.add_handler(CommandHandler('get_uptime', getUptime))
    dp.add_handler(CommandHandler('get_df', getDf))
    dp.add_handler(CommandHandler('get_free', getFree))
    dp.add_handler(CommandHandler('get_mpstat', getMpstat))
    dp.add_handler(CommandHandler('get_w', getW))
    dp.add_handler(CommandHandler('get_auths', getAuths))
    dp.add_handler(CommandHandler('get_critical', getCritical))
    dp.add_handler(CommandHandler('get_ps', getPs))
    dp.add_handler(CommandHandler('get_ss', getSs))
    dp.add_handler(CommandHandler('get_apt_list', getAptList))
    dp.add_handler(CommandHandler('get_services', getServices))

	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, start))

	# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()

	# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+C
    updater.idle()


if __name__ == '__main__':
    main()
